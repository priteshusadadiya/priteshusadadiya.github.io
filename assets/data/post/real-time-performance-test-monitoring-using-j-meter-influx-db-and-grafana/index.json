{"hash":"77696a62d2d9c914f77f1332b7abaf8da725d4eb","data":{"post":{"title":"Real Time Performance Test Monitoring using JMeter, InfluxDB and Grafana","path":"/post/real-time-performance-test-monitoring-using-j-meter-influx-db-and-grafana/","date":"2. November 2019","timeToRead":3,"tags":[{"id":"jmeter","path":"/tag/jmeter/","title":"jmeter"},{"id":"performancetesting","path":"/tag/performancetesting/","title":"performancetesting"},{"id":"featured","path":"/tag/featured/","title":"featured"}],"category":[{"id":"Software Testing","path":"/category/software-testing/","title":"Software Testing"}],"description":"In this post we will see how easy it is to setup Jmeter to monitor Real Time test results using InfluxDB and Grafana.","content":"<p>In this post we will see how easy it is to setup Jmeter to monitor Real Time test results using InfluxDB and Grafana.</p>\n<!--more-->\n<p>Jmeter provides a nonGUI mode to run performance test and it provides a nice summary result on console itself. you can certainly monitor test results on console and it works pretty well but if your test runs for hours then,</p>\n<p>it gets hard to analyze the summary results after a while.</p>\n<p>For ex, If I would like to know the active user count or response time over certain period, you have to go through the console summary output line by line.</p>\n<p>Another drawback is that results are in raw format which means you cannot just share it with the development/server team as the results are not in a very user-friendly format.</p>\n<p>To create graphs, Aggregrate Report, Error report you will need to wait for the JMeter test to finish.</p>\n<p>So, we can use JMeter’s Backend listener to send the results to an Influx database and visualize them in Grafana with nice chart by querying the DB.</p>\n<h2 id=\"how-to-setup-and-prepare-influxdb-instance\"><a href=\"#how-to-setup-and-prepare-influxdb-instance\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to setup and prepare InfluxDB instance</h2>\n<hr>\n</br>\nFirst, let’s [Download](https://portal.influxdata.com/downloads) the InfluxDB based on your system.\n<p>Now, to start InfluxDB navigate to <code>/bin</code> directory and double click the <code>influxd.exe</code>.</p>\n<p>you will see a screen like below.\n<img src=\"/images/08/1.png\" alt=\"an image\"></p>\n<p>After that We need to create a database for storing our JMeter load test data. In the <code>/bin</code> directory double click <code>Influx.exe</code>.</p>\n<p>Let’s run the <code>SHOW DATABASES</code> command – this will give you a list of databases.</p>\n<p><img src=\"/images/08/2.png\" alt=\"an image\"></p>\n<p>To create a database Run the command: <code>CREATE DATABASE jmeterresults</code></p>\n<p>Now let’s again run <code>SHOW DATABASES</code> again and you should see your new database listed.</p>\n<p><img src=\"/images/08/3.png\" alt=\"an image\"></p>\n<p>We are done with Influxdb.</p>\n<h2 id=\"how-to-prepare-jmeter\"><a href=\"#how-to-prepare-jmeter\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to prepare Jmeter</h2>\n<p>Open Jmeter script in GUI mode, if you don’t have one right now, here is a sample script for BlazeDemo site.</p>\n<p>First, let’s add a new backend listener to the thread group</p>\n<p>In the Backend Listener Implementation dropdown,</p>\n<pre><code>select `org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient` option. \n</code></pre>\n<p><img src=\"/images/08/4.png\" alt=\"an image\"></p>\n<p>And Configure the parameters as follows:</p>\n<pre><code>influxdbMetricsSender – NO CHANGE \n\ninfluxdbUrl – this is the URL of InfluxDB is in the following format:  \n\n                http://host_to_change:8086/write?db=jmeter.  \n\napplication – NO CHANGE \n\nmeasurement – NO CHANGE \n\nsummaryOnly – NO CHANGE \n\nsamplersRegexp – NO CHANGE \n\npercentiles – NO CHANGE \n\ntestTitle – Title of the Test \n\neventTags – NO CHANGE.\n</code></pre>\n<p>As we have created the <code>“jmeterresults”</code> database and we will be running it on a local machine with a default port, so in our case, the URL will be <code>http://127.0.0.1:8086/write?db=jmeterresults</code></p>\n<p>Okay, now let’s run the test for few minutes so that we can have some data to show on Grafana.</p>\n<p>We are done with the Listener Setup.</p>\n<h2 id=\"how-to-prepare-grafana\"><a href=\"#how-to-prepare-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to prepare Grafana</h2>\n<p>Download Grafana as per your system requirement.</p>\n<p>To start Grafana navigate to the <code>/bin</code> directory and run grafana-server.exe. (If you have installed as a Windows <code>exe</code> then there is no need to do this step as grafana will be started as default)</p>\n<p>Now let’s, open a browse and add following in URL Path: <code>http://localhost:3000</code> ( default username/password = admin/admin )</p>\n<p>Click Add Data Source and choose <code>InfluxDB</code> as the data source type.</p>\n<p><img src=\"/images/08/5.png\" alt=\"an image\"></p>\n<p>Specify the URL: <code>http://localhost:8086</code> and the name of the influxdb database: <code>jmeterresults</code></p>\n<p>Save the changes.</p>\n<p><img src=\"/images/08/6.png\" alt=\"an image\"></p>\n<p>We have successfully created a DataSource instance and connected it with our database.</p>\n<p>Now for the Dashboard, Click <code>(+)</code> icon located in menu bar panel and choose <code>Import</code></p>\n<p><img src=\"/images/08/7.png\" alt=\"an image\"></p>\n<p>Add <code>5496</code> in Grafana.com Dashboard input field and click Load. (we are using this dashboard <code>https://grafana.com/grafana/dashboards/5496</code>)</p>\n<p>Click anywhere outside the input box and you should be able see a dashboard detail.</p>\n<p><img src=\"/images/08/8.png\" alt=\"an image\"></p>\n<p>On the import dashboard screen, we will be prompted for the following:</p>\n<pre><code> Name – specify the dashboard name (optional) \n\n Folder – NO CHANGE \n\n DB name – select the InfluxDB data source as jmeterresults \n\n Measurement name – NO CHANGE \n\n Backend send interval – NO CHANGE\n</code></pre>\n<p>We are done with Grafana setup.</p>\n<p>After above steps are cleared, we can run the test and see the results in the Grafana Dashboard in real time.</p>\n<p><img src=\"/images/08/9.png\" alt=\"an image\"></p>\n<p>Hope this information can be useful.</p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/jmeter-grafana-influxdb.07cc2b7.5127ace940d610fb1b8fcbf03b0d66b6.png","size":{"width":860,"height":424},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/jmeter-grafana-influxdb.a67b0b2.5127ace940d610fb1b8fcbf03b0d66b6.png 480w","/assets/static/jmeter-grafana-influxdb.07cc2b7.5127ace940d610fb1b8fcbf03b0d66b6.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 424' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ee76ed9de281eb6ce707ce27ed85cbb0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ee76ed9de281eb6ce707ce27ed85cbb0)' width='860' height='424' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAgCAYAAACinX6EAAAACXBIWXMAAAsSAAALEgHS3X78AAANF0lEQVRo3rWZ%2bVcUdxbF%2b0wUWQRRoGuvZt9kB0EQ2QQREIUYoiFqoigad4O4AG6o4IIg4gLuEhVQUIz7bnCNMSbjTM6Zk3/mzquqpruL7gac4/xQB3699/O%2b79332vAN8y8sYD7ia%2bZPlDF/4Cvmd8xj3uNL5h1KmbcoYd5gLvsKc9iXKGYHUMT%2bgkL2GQrYJ5jFPkY%2b%2bxAzuQfI4%2b4hl7uLGdxtZHO3kMXdRCZ3AxncdUznepHOX8M0vgdpfDdS%2bSuYyl9GMv8TpvAXkcRfQKJwDgnCWcQLpxEnnEKs0I4Y4SSihOOIFtoQJbYiQjiCCLEZ4eJhhIqHECIeRLC4H0FiIwLFffAX98Ik1kOWdkOSdkKUdkCQ6sBLNeCkbWClLTBKm%2bEnb4KvXAUfeSMMC8iA%2bcw/yYA/yIAPZMB7MuA3MuBXEv%2bWxL8m8a9I/AvMJvFF7HMy4KnZgEck/iGJv0/i75H4O8gh8dncz2RAv9mAPkzne0n8VRLfQ%2bK7VPEp/CUyoNNswHkk8ooBZ8ziO1Tx0cIJVXwIfwKB/HESfoREHyHBLfQdpu8g/KWDMEn7EaAasIf%2bVwzYRQbsIAO2k/haEl9D4reCUQyQq8mAKjLgRzJgg2LARzLAEX0ygNXTn22h/9RKn9XTz7HQ77fS5%2bzpp6j0OzX6vGP6McIxBPHtKAnegcrwDZjMHkIWW4NMditSuO301WAqtxXp7CaECbsgK/TFXWb62%2b3oM0PoT1IM0Oj/OYS%2b1QAr/QE7%2booBevq3HdJPHyV9xYBB%2bjFU%2bpNF%2bvijeChPx97AhYhkD6CQ2YIZbC1ymSoytw4ZbDWy2Q1UGTuJ/j6Y5H0Qxe1q%2bWv0FfHbwMgK/c06%2bpPk9YoBjunbvv/B8tfTf%2bSQfvbnpC92YOWklbjuMR3R/CGs9KlEhNcsjJ8wCyFSEyZ6JIExrkCw1IggEs9zP4JlVkKW94IXayDIO8DJdSp9H64SPvwPagUM0p8or4PBnr4mXnn71vK3VoAt/ZmfTP/KKOgrBpxQ6cfzLWh1LcJ6r%2b9JyAmc9CxA9LgQGP7hCcm4BgaDAd6eGXB3j8X48clwcw2Di4sI74mFGOcaiPFeafQ3GB5eqdT8qPTFdeby1%2bhPlNcqBjh7%2b691b18r/2fqE1AqQKN/345%2bloV%2bn5n%2bVTv6yRb6553QVxreCaT7NWC961KkstTdpVYc9ipCjHsiDC4meJBYNzJjzBeTMHYsAw8ywcVFwsRJc%2bEyTlYNGOvC4YsxPvAT15vLX0/fWzFAo/%2b7zdsn%2bsxrB2/fOvps37%2be/k07%2btM%2bkb7S%2baOo/CeLNPp8DyPK5xCZ0UzvuQ3NZECcWzzGjZ8GNxd/op8Fd7dIuI4LhLd3PiZMmAFX1xC4e8TB1S1MqwD3MDCmbfCTBt/%2bRjP9dZggr1EMGIE%2b9wuKhecoEp6ikH%2bMQpHE80r3v2%2bpgE%2blP0VH/4yOfjTRVw0QjiKcV%2bZ%2bC834Viz1WYrT7tMQTU1Poo7vz2%2bDzNdAFmjUsevAMMup%2bdXCyCwDJ26GD/MdfLnl8OVXqeXvZ9P5B%2blPkFfDMJR%2bCaO9/WLmBebwAygwPkOm%2b0PkeD7CDO9HSHe7g8yJdzBTGGx%2bQ9%2b/2QBL8LGl/5ND%2bnE6%2btT5afZHCq0IF1oo/DRT2GmhTr%2bVRl4dAqTD1PT2I1CZ/VIDPY09aueXle6vzH55t9r9edNOsHItdf%2bt5tGnp%2b9N9L3kVTA4pM%2b8xBzhF%2bSS4FLTC9Qv/Qsn9n7EqaaPaNr2FyrS3yDNsx%2b5wi0S/7OD7j9ogLUCrOU/OvqRSvIj4WFU/mFiEwltptDTRJOhQU19AUroUef%2b7mHmfrWFvmLAUPpmA37Txd45zCvM5V8id8JjrEh9j2udH3DuUgtOtK7D0fpl6DhQjZ5r99G44SOmTbiOHOHmCLHXdvZbK8Da/DpUA/T0j6qxN1wVr8XeUPEAVYISeRvNqW8w9toHH3Xuq7G32il9xQBP%2bQcYLPQZjf5c7hUKfJ%2bjPPwt%2brrfoa6tEqs2foOiskUo/moxFhXPRv28Gbhy5RJ2Vn5A8vhryBFvWktf9/a7hrx9LffbGmCJvaK1%2ban0BY1%2bKNFXM790gGY9lT5VQACJ91dKX838u0j8Tpr5222Cz1Y19WkGOKfvKa8cNMAaekqEl8h2f4KT2/5GbccmzF43D0mzViByxreYWbgAX89dgFVl5agrzEZ3z2sUBd/DdKYPGfxQ%2bl02pe9o6Tmjq4AolsTzbYjwO4wImv/hSvnzTZoB8iEECxR2jPUafQo6JnkPvXsywEQGCHUQBCp9WTOA0S09jul7Ef3xphUw2NJXOv9sZoCewGtc6niD%2bftKkFS0EAkzFyI%2bfyHmz/4S9V8Woaq0BOvTM3C29TjWznuDKZ49yBSvO6GvH336t0/iRSp/pg3x8VcwpfAu4jN7ERl0HGFcE8JClEWISt%2bnHkHBzQiYdhYBcgP8GYq97A7IbB0kv63gw/eBjaD0RxOClZ3RX29H32yAfuVVyz/sN3See4rS3cVIK16OpIJFCM0sw8zk6bhYkoNzpXnYnDsL7Q37UL3kVyR6dJMBfZ9A30yeom60kcQnXEFiTj9iYy8gIb8fMRk9CGMOISLzCsJyuxGS0Ymg5U/gv%2bkNTFnnIMcegZh2EnzyURiLLmBC1RN4bHkGn8w2sHy1JfRYlx5H9FfCw1QJQwn71mbuv1BDTzH9f/nUO3y9txSJxeWIn7kIcbMWITVvAVrzsnBhVhZWT03D2bZ2rCp5iSSvbmSIvSPST%2bT19GOIfpRfKxKm9iAx9waiQtsRGXIcsQU3Ee7fiqhFTxBROYDQiicIWnwf/uW3IW0YAL/iIYxVA/DdMoCJ1c/gWTMA9/o38FraR7vAjzCa9EuPlf4aHX0P03IywIa%2bkvqU8afM/bZN/8Gei7uR/30B0vMWI4GqIDp/EVXDYqzILsCW0kJ0db9Gnn8/prHX7A4eqSR%2bqtCJFOECkoXzTpeeKK4N0cGnMGXOfcQmdSKx7AGi0i4hVKAEmN6JkPh2BGdRBczthX/CMchFVyAWdILPOgU2qx1%2bJZ3wnXES3vMvwy%2b%2bEQxXReKrh6XvaabvrhhgS1/N/Nxz5BsfozTgOW5d%2b4gl1ashxRdQaS5GZslyBKSWYkrOXHRd60P1wpdI9Oyi8tfTTyED4tluRDHdmMx00R5/GUlD3v7gwSNKVJof0Q7tQFx6N6ITLyDEuJ86PzU%2btgFBzF4E%2bh9AQMgh7e0bt0M21kJiaiCy2yAYN4NnqsEZq6j8N2kHD0m/8urpU/nLGn130zLFAPtzVxH/FDmT7qE8dgC9F/%2bNxmOnUFFdi6Wba7FxVwO6%2b56hruI1lb4m3nblTeG6kCFdwNzAo2ieugInpi3BN2ENiOWUBnjaLvioc1%2bkuc/RzDfSvGcPIlQaOvqo8wv15s5fD0mmzk%2brrjr6aN3lTDWU97dqb1/SHzyGo%2b9mqoDB0blLWXgKhIfI9rmDPMr8teW/49iuDzi%2b5x0ObHiPsrj7SPLs1sTbJL40Ip/E9WCWqR1/z5uCtrQK1CevQXNqBTJMxxDDKxXQbqWvpj4t9kaIFHykFjX4qPQp%2bASJ5rlPu7469yn1DZ67hFGcu0ai72Zaqhjg/NyVzz9ALnsPqeNvIsW9H8nuN5Dk3os03z5kiTfsDh5pwmXEGq%2biMnE37pYVoCzyAHakr8WBnGXI9D%2bKaJ0BWuxVU58iXmwxpz4zfdWAkY6dtfpzl0P6a6301eZnpe%2bqGOD03KUcO9WN7x7yhLvIE28jV7ylpr4s3vHBI024hGjfXjQW/YC/dsSiImUnsmimP1iXjYLJBxHJnqXR54C%2bJfY2qbFXR/%2bTjp2bdPQnOqRfaaHvalqiGDDwv5%2b7HJy6U7gLCPToRUflV/i1KQoD%2bxPQsng%2bYlhqfLx27Rk9fS32Dk9/MPgMR3%2bVhb6HDf1xpu9hcHbsHO25a/DgkSpQkmN%2bQkFcDwoTryI/pgMVhcewpXwHpkecxZRACjnUG6J5Z/QPm%2bkfHIb%2b4NIzHP2Njumb7OmPM32nGOCM/qedu1Lp/Sf4XsS3ef2oWf0QK%2bbfQVXlM1SvHsDK8n5sWX0XuYnnEU7JL1rUVt4IWnpGou//f6TvohigP3cNR390565kkT4ag8nyOSSbziAl4DQSpFNICqDxJ538DPTrRkHfevCwp19hpq8YsFgxYAh97jMcO7lziOfOIo6jdZfT3n4Up%2b37gwcPK/1m5/Rp9MmWldcZ/Wqn5y4Lfcvo09Mfa1oEg/3vfFrnHw19h%2bcuYXDp0a%2b7MUPOXUPph1joNw5Ln7elP%2bzBY2T6Y00LFQOc0b8zCvpdozh2djg8d42GvmmU9Ic7eNgGn6H0x5i%2bhcHxr7yO6NsfPKY6XXnPDHPuckw/eCj9z3DuGon%2bGH%2bqgOHpD7n0jkA/aTT0BeuxU6N/aBT0R3PucnzwsI29Ovr%2bi/GFWIL/AoY8GYIagx32AAAAAElFTkSuQmCC' /%3e%3c/svg%3e"}}},"context":{}}